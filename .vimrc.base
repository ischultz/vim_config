source $vimruntime/mswin.vim
behave mswin
set nocompatible
if !(has('win16') || has('win32') || has('win64'))
   set shell=/bin/sh
endif

if has('win32') || has('win64')
   set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

   " Be nice and check for multi_byte even if the config requires
   " multi_byte support most of the time
   if has("multi_byte")
      " Windows cmd.exe still uses cp850. If Windows ever moved to
      " Powershell as the primary terminal, this would be utf-8
      set termencoding=cp850
      " Let Vim use utf-8 internally, because many scripts require this
      set encoding=utf-8
      setglobal fileencoding=utf-8
      " Windows has traditionally used cp1252, so it's probably wise to
      " fallback into cp1252 instead of eg. iso-8859-15.
      " Newer Windows files might contain utf-8 or utf-16 LE so we might
      " want to try them first.
      set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
   endif
endif

filetype plugin indent on
scriptencoding utf-8
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Bundles {
   " Deps {
      Bundle 'gmarik/vundle'
      Bundle 'MarcWeber/vim-addon-mw-utils'
      Bundle 'tomtom/tlib_vim'
      if executable('ack-grep')
         let g:ackprg="ack-grep -H --nocolor --nogroup --column"
         Bundle 'mileszs/ack.vim'
      elseif executable('ack')
         Bundle 'mileszs/ack.vim'
         elseif executable('ag')
      Bundle 'mileszs/ack.vim'
         let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
      endif
   " }
   Bundle 'L9'
   Bundle 'FuzzyFinder'
   Bundle 'Lokaltog/vim-easymotion'
   Bundle 'kien/ctrlp.vim'
   Bundle 'scrooloose/nerdtree'
   Bundle 'jistr/vim-nerdtree-tabs'
   Bundle 'scrooloose/nerdcommenter'
   Bundle 'tpope/vim-surround'
   Bundle 'mbbill/undotree'
   Bundle 'nathanaelkane/vim-indent-guides'
   Bundle 'vim-scripts/restore_view.vim'
   Bundle 'Shougo/neocomplcache'
   Bundle 'matchit.zip'
   Bundle 'bling/vim-airline'
   Bundle 'editorconfig/editorconfig-vim'

   " HTML {
      Bundle 'amirh/HTML-AutoCloseTag'
      Bundle 'hail2u/vim-css3-syntax'
      Bundle 'tpope/vim-haml'
   " }

   if executable('ctags')
      Bundle 'majutsushi/tagbar'
   endif
"}

let mapleader = ','

map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_
noremap j gj
noremap k gk
cmap Tabe tabe
nnoremap <leader>r :exec &nu ? &rnu ? "set rnu! nu!" : "set rnu" : "set nu"<CR>
nnoremap <leader>R :exec &rnu ? "set rnu! nu" : &nu ? "set nu!" : "set rnu nu"<CR>

nnoremap <S-H> :tabprevious<CR>
nnoremap <S-L> :tabnext<CR>
nnoremap <C-S-H> :bp<CR>
nnoremap <c-S-L> : bn<CR>

" Trim whitespace from end of lines
:nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" http://vimcasts.org/e/14
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

set guioptions+=b
set ai
set guifont=courier_new:h10
set tabstop=3
set softtabstop=3
set shiftwidth=3
set expandtab
set ruler
set smartindent
set ignorecase
set nospell
set hls
set guioptions-=T
set backspace=indent,eol,start
set clipboard=autoselect,exclude:cons\|linux
set mouse=a
set mousehide
set hidden
set cursorline
set number
set showmatch
set incsearch
set hlsearch
set smartcase
set wildmenu
set wildmode=list:longest,full
set whichwrap=b,s,h,l,<,>,[,]
set scrolljump=5
set scrolloff=3
set nolist
set autoindent
set nojoinspaces
set splitright
set splitbelow
set pastetoggle=<F12>
set shortmess+=filmnrxoOtT
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:.

autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml,cs autocmd BufWritePre <buffer> call StripTrailingWhitespace()
autocmd FileType go autocmd BufWritePre <buffer> Fmt
autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig
autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufRead *.coffee set filetype=coffee
autocmd FileType haskell setlocal commentstring=--\ %s
autocmd FileType haskell setlocal nospell

set backup
if has('persistent_undo')
   set undofile
   set undolevels=1000
   set undoreload=10000
endif

if has('cmdline_info')
   set ruler
   set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%)
   set showcmd
endif

if has('statusline')
   set laststatus=2

   " Broken down into easily includeable segments
   set statusline=%<%f\                     " Filename
   set statusline+=%w%h%m%r                 " Options
   set statusline+=%{fugitive#statusline()} " Git Hotness
   set statusline+=\ [%{&ff}/%Y]            " Filetype
   set statusline+=\ [%{getcwd()}]          " Current dir
   set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif

if has("user_commands")
   command! -bang -nargs=* -complete=file E e<bang> <args>
   command! -bang -nargs=* -complete=file W w<bang> <args>
   command! -bang -nargs=* -complete=file Wq wq<bang> <args>
   command! -bang -nargs=* -complete=file WQ wq<bang> <args>
   command! -bang Wa wa<bang>
   command! -bang WA wa<bang>
   command! -bang Q q<bang>
   command! -bang QA qa<bang>
   command! -bang Qa qa<bang>
endif

autocmd BufEnter * if bufname("") !~ "^\[A-Za-z0-9\]*://" | lcd %:p:h | endif
au FileType gitcommit au! BufEnter COMMIT_EDITMSG call setpos('.', [0, 1, 1, 0])

" http://vim.wikia.com/wiki/Restore_cursor_to_file_position_in_previous_editing_session
" Restore cursor to file position in previous editing session
" To disable this, add the following to your .vimrc.before.local file:
function! ResCur()
   if line("'\"") <= line("$")
      normal! g`"
      return 1
   endif
endfunction

augroup resCur
   autocmd!
   autocmd BufWinEnter * call ResCur()
augroup END

" Plugins {
   " PIV {
      let g:DisableAutoPHPFolding = 0
      let g:PIVAutoClose = 0
   " }

   " Misc {
      let g:NERDShutUp=1
      let b:match_ignorecase = 1
   " }

   " OmniComplete {
      if has("autocmd") && exists("+omnifunc")
         autocmd Filetype *
            \if &omnifunc == "" |
            \setlocal omnifunc=syntaxcomplete#Complete |
            \endif
      endif

      hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
      hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
      hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

      " Some convenient mappings
      inoremap <expr> <Esc> pumvisible() ? "\<C-e>" : "\<Esc>"
      inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
      inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
      inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
      inoremap <expr> <C-d> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-d>"
      inoremap <expr> <C-u> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-u>"

      " Automatically open and close the popup menu / preview window
         au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
         set completeopt=menu,preview,longest
      " }

      " Ctags {
         set tags=./tags;/,~/.vimtags

         " Make tags placed in .git/tags file available in all levels of a repository
         let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
            if gitroot != ''
            let &tags = &tags . ',' . gitroot . '/.git/tags'
         endif
   " }

   " AutoCloseTag {
      " Make it so AutoCloseTag works for xml and xhtml files as well
      au FileType xhtml,xml ru ftplugin/html/autoclosetag.vim
      nmap <Leader>ac <Plug>ToggleAutoCloseMappings
   " }

   " NerdTree {
      autocmd VimEnter * if exists(":NERDTreeToggle") | :call ConfigureNERDTree() | endif
      function! ConfigureNERDTree()
         map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>
         map <leader>e :NERDTreeFind<CR>
         nmap <leader>nt :NERDTreeFind<CR>

         let NERDTreeShowBookmarks=1
         let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
         let NERDTreeChDirMode=0
         let NERDTreeQuitOnOpen=1
         let NERDTreeMouseMode=2
         let NERDTreeShowHidden=1
         let NERDTreeKeepTreeInNewTab=1
         let g:nerdtree_tabs_open_on_gui_startup=0
      endfunction
   " }

   " Session List {
      set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
      nmap <leader>sl :SessionList<CR>
      nmap <leader>ss :SessionSave<CR>
   " }

   " neocomplcache {
      autocmd VimEnter * if exists(":NeoComplCacheToggle") | :call ConfigureNeoComplCache() | endif
      function! ConfigureNeoComplCache()
         let g:acp_enableAtStartup = 0
         let g:neocomplcache_enable_at_startup = 1
         "let g:neocomplcache_enable_camel_case_completion = 1
         "let g:neocomplcache_enable_smart_case = 1
         "let g:neocomplcache_enable_underbar_completion = 1
         let g:neocomplcache_enable_auto_delimiter = 1
         let g:neocomplcache_max_list = 15
         let g:neocomplcache_force_overwrite_completefunc = 1

         if g:neocomplcache_enable_at_startup
            NeoComplCacheEnable
         endif

         " SuperTab like snippets behavior.
         imap <silent><expr><TAB> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
            \ "\<C-e>" : "\<TAB>")
         smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)

         " Define dictionary.
         let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
         \ }

         " Define keyword.
         if !exists('g:neocomplcache_keyword_patterns')
            let g:neocomplcache_keyword_patterns = {}
         endif
         let g:neocomplcache_keyword_patterns._ = '\h\w*'

         " Plugin key-mappings {
         " These two lines conflict with the default digraph mapping of <C-K>
         "imap <C-k> <Plug>(neosnippet_expand_or_jump)
         "smap <C-k> <Plug>(neosnippet_expand_or_jump)

         inoremap <expr><C-g> neocomplcache#undo_completion()
         inoremap <expr><C-l> neocomplcache#complete_common_string()
         inoremap <expr><CR> neocomplcache#complete_common_string()

         " <TAB>: completion.
         inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
         inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"

         " <CR>: close popup
         " <s-CR>: close popup and save indent.
         inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()."\<CR>" : "\<CR>"
         inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup()."\<CR>" : "\<CR>"
         inoremap <expr><Esc> pumvisible() ? neocomplcache#close_popup() : "\<Esc>"
         "inoremap <silent> <CR> <C-r>=neocomplcache#smart_close_popup()<CR><CR>

         " <C-h>, <BS>: close popup and delete backword char.
         inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
         inoremap <expr><C-y> neocomplcache#close_popup()
         " }

         " Enable omni completion.
         autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
         autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
         autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
         autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
         autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
         autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
         autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

         " Haskell post write lint and check with ghcmod
         " $ `cabal install ghcmod` if missing and ensure
         " ~/.cabal/bin is in your $PATH.
         if !executable("ghcmod")
            autocmd BufWritePost *.hs GhcModCheckAndLintAsync
         endif

         " Enable heavy omni completion.
         if !exists('g:neocomplcache_omni_patterns')
            let g:neocomplcache_omni_patterns = {}
         endif
         let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
         let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
         let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
         let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
         let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

         " Use honza's snippets.
         let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

         " Enable neosnippet snipmate compatibility mode
         let g:neosnippet#enable_snipmate_compatibility = 1

         " For snippet_complete marker.
         if has('conceal')
            set conceallevel=2 concealcursor=i
         endif

         " Disable the neosnippet preview candidate window
         " When enabled, there can be too much visual noise
         " especially when splits are used.
         set completeopt-=preview
      endfunction
   " }

   " ctrlp {
      let g:ctrlp_working_path_mode = 'ra'
      nnoremap <silent> <D-t> :CtrlP<CR>
      nnoremap <silent> <D-r> :CtrlPMRU<CR>
         let g:ctrlp_custom_ignore = {
         \ 'dir':  '\.git$\|\.hg$\|\.svn$',
         \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

      " On Windows use "dir" as fallback command.
      if has('win32') || has('win64')
         let g:ctrlp_user_command = {
            \ 'types': {
               \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
               \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': 'dir %s /-n /b /s /a-d'
         \ }
      else
      let g:ctrlp_user_command = {
         \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
         \ },
         \ 'fallback': 'find %s -type f'
      \ }
      endif
   "}

   " TagBar {
      nnoremap <silent> <leader>tt :TagbarToggle<CR>

      " If using go please install the gotags program using the following
      " go install github.com/jstemmer/gotags
      " And make sure gotags is in your path
      let g:tagbar_type_go = {
         \ 'ctagstype' : 'go',
         \ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
         \ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
         \ 'r:constructor', 'f:functions' ],
         \ 'sro' : '.',
         \ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
         \ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
         \ 'ctagsbin'  : 'gotags',
         \ 'ctagsargs' : '-sort -silent'
      \ }
   "}

   " PythonMode {
   " Disable if python support not present
      if !has('python')
         let g:pymode = 1
      endif
   " }

   " UndoTree {
      nnoremap <Leader>u :UndotreeToggle<CR>
      " If undotree is opened, it is likely one wants to interact with it.
      let g:undotree_SetFocusWhenToggle=1
   " }

   " indent_guides {
      let g:indent_guides_auto_colors = 1
      " For some colorschemes, autocolor will not work (eg: 'desert', 'ir_black')
      autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#212121 ctermbg=3
      autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#404040 ctermbg=4
      let g:indent_guides_start_level = 2
      let g:indent_guides_guide_size = 1
      let g:indent_guides_enable_on_vim_startup = 1
   " }

" Functions {

   " UnBundle {
      function! UnBundle(arg, ...)
         let bundle = vundle#config#init_bundle(a:arg, a:000)
         call filter(g:bundles, 'v:val["name_spec"] != "' . a:arg . '"')
      endfunction

      com! -nargs=+ UnBundle
         \ call UnBundle(<args>)
   " }

   " Initialize directories {
      function! InitializeDirectories()
         let parent = $HOME
         let prefix = 'vim'
         let dir_list = {
            \ 'backup': 'backupdir',
            \ 'views': 'viewdir',
            \ 'swap': 'directory' }

         if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
         endif

         " To specify a different directory in which to place the vimbackup,
         " vimviews, vimundo, and vimswap files/directories, add the following to
         let common_dir = parent . '/.' . prefix

         for [dirname, settingname] in items(dir_list)
            let directory = common_dir . dirname . '/'
            if exists("*mkdir")
               if !isdirectory(directory)
                  call mkdir(directory)
               endif
            endif
            if !isdirectory(directory)
               echo "Warning: Unable to create backup directory: " . directory
               echo "Try: mkdir -p " . directory
            else
               let directory = substitute(directory, " ", "\\\\ ", "g")
               exec "set " . settingname . "=" . directory
            endif
         endfor
      endfunction
      call InitializeDirectories()
   " }

   " Initialize NERDTree as needed {
      function! NERDTreeInitAsNeeded()
         redir => bufoutput
         buffers!
         redir END
         let idx = stridx(bufoutput, "NERD_tree")
         if idx > -1
            NERDTreeMirror
            NERDTreeFind
            wincmd l
         endif
      endfunction
   " }

   " Strip whitespace {
      function! StripTrailingWhitespace()
         " Preparation: save last search, and cursor position.
         let _s=@/
         let l = line(".")
         let c = col(".")
         " do the business:
         %s/\s\+$//e
         " clean up: restore previous search history, and cursor position
         let @/=_s
         call cursor(l, c)
      endfunction
   " }

   " Shell command {
      function! s:RunShellCommand(cmdline)
         botright new

         setlocal buftype=nofile
         setlocal bufhidden=delete
         setlocal nobuflisted
         setlocal noswapfile
         setlocal nowrap
         setlocal filetype=shell
         setlocal syntax=shell

         call setline(1, a:cmdline)
         call setline(2, substitute(a:cmdline, '.', '=', 'g'))
         execute 'silent $read !' . escape(a:cmdline, '%#')
         setlocal nomodifiable
         1
      endfunction

      command! -complete=file -nargs=+ Shell call s:RunShellCommand(<q-args>)
   " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %
   " }
" }
